name: CI

on:
  push:
    paths-ignore:
      - "**.md"
      - "docs/**"
  pull_request:
    paths-ignore:
      - "**.md"
      - "docs/**"

env:
  LuaInstaller_VERSION: 0.1.0.0
  LUAROCKS_VERSION: 3.11.1

jobs:
  build:
    runs-on: windows-latest
    name: Build

    strategy:
      matrix:

        LUA_VERSION:
          - 5.1.5
          - 5.2.4
          - 5.3.6
          - 5.4.7
        
        ARCH:
          - x64
          - x86
        
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: LuaInstaller
      
      - name: Set environment variables
        run: |
          $wpf_dir = Join-Path "${{ runner.temp }}" -ChildPath LuaInstaller.EndUsers;
          $console_dir = Join-Path "${{ runner.temp }}" -ChildPath LuaInstaller.Console;

          Add-Content "${{ github.env }}" "WPF_DIR=${wpf_dir}";
          Add-Content "${{ github.env }}" "CONSOLE_DIR=${console_dir}";

      - name: Setup dotnet
        run: |
          $dotnet_dir = Join-Path -Path "${{ runner.temp }}" -ChildPath "dotnet_dir";

          New-Item $dotnet_dir -ItemType Directory;

          $dotnet_install_file = Join-Path -Path $dotnet_dir -ChildPath "dotnet-install.ps1";
          $dotnet_runner = Join-Path -Path $dotnet_dir -ChildPath "dotnet";

          Invoke-WebRequest -Uri 'https://dot.net/v1/dotnet-install.ps1' -UseBasicParsing -OutFile $dotnet_install_file;
          & $dotnet_install_file -Architecture "${{ matrix.ARCH }}" -Version "6.0.427" -InstallDir $dotnet_dir;

          $lua_dir = Join-Path -Path "${{ runner.temp }}" -ChildPath "Lua";
          $luarocks_dir = Join-Path -Path "${{ runner.temp }}" -ChildPath "luarocks-${{ env.LUAROCKS_VERSION }}-windows-64";
          $lfs_test_file = Join-Path -Path "${{ runner.temp }}" -ChildPath "lfs-test.lua";

          Add-Content "${{ github.env }}" "DOTNET_RUNNER=${dotnet_runner}";
          Add-Content "${{ github.env }}" "LUA_DIR=${lua_dir}";
          Add-Content "${{ github.env }}" "LUAROCKS_DIR=${luarocks_dir}";
          Add-Content "${{ github.env }}" "LFS_TEST_FILE=${lfs_test_file}";

      - name: Restore the solution
        run: |
          & "${{ env.DOTNET_RUNNER }}" `
            restore LuaInstaller\LuaInstaller.sln

      - name: Build LuaInstaller.Console
        run: |
          & "${{ env.DOTNET_RUNNER }}" `
            publish LuaInstaller\LuaInstaller.Console\LuaInstaller.Console.csproj `
            -o "${{ env.CONSOLE_DIR }}" `
            -c Release `
            -r win-${{ matrix.ARCH }} `
            --self-contained true

      - name: Build LuaInstaller
        run: |
          & "${{ env.DOTNET_RUNNER }}" `
            publish LuaInstaller\LuaInstaller\LuaInstaller.csproj `
            -o "${{ env.wpf_dir }}" `
            -c Release `
            -r win-${{ matrix.ARCH }} `
            --self-contained true
      
      - name: Test LuaInstaller.Console installing Lua ${{ matrix.LUA_VERSION }}
        run: |
          $console = Join-Path "${{ env.CONSOLE_DIR }}" -ChildPath "LuaInstaller.Console.exe";
          
          $commands = "/?", "list-win-sdk", "list-vs-${{ matrix.ARCH }}", "list-lua";
          $color = (0x1b -as [char]) + "[35m";

          foreach ($c in $commands) {
            Write-Host;
            Write-Host "${color}command: ${c}";
            Write-Host;
            & $console $c;
            Write-Host;
          }
          
          & $console install `
            "dest-dir=${{ env.LUA_DIR }}" `
            arch=${{ matrix.ARCH }} `
            "version=${{ matrix.LUA_VERSION }}";
          
          $luaBinDir = Join-Path -Path "${{ env.LUA_DIR }}" -ChildPath "bin";
          $luaExe = Join-Path -Path $luaBinDir -ChildPath "lua.exe";

          & $luaExe -v

      - name: Download LuaRocks
        run: Invoke-WebRequest -Uri https://luarocks.org/releases/luarocks-${{ env.LUAROCKS_VERSION }}-windows-64.zip -OutFile luarocks-${{ env.LUAROCKS_VERSION }}-windows-64.zip
      
      - name: Extract LuaRocks
        run: Expand-Archive luarocks-${{ env.LUAROCKS_VERSION }}-windows-64.zip -DestinationPath ([System.IO.Path]::GetDirectoryName("${{ env.LUAROCKS_DIR }}"))
      
      - name: Add Lua and LuaRocks to system PATH environment variable
        run: |
          $luaBinDir = Join-Path -Path "${{ env.LUA_DIR }}" -ChildPath "bin";

          Add-Content "${{ github.path }}" "$luaBinDir";
          Add-Content "${{ github.path }}" "${{ env.LUAROCKS_DIR }}";
      
      - name: Setup MSVC dev-prompt for LuaRocks configuration
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.ARCH }}
      
      - name: Configure LuaRocks for Lua ${{ env.LUA_VERSION }}
        run: |
          luarocks config lua_dir "${{ env.LUA_DIR }}"
          
          if ("${{ matrix.LUA_VERSION }}" -match "^(\d+)\.(\d+)(\.\d+)*$")
          {
            $LUA_SHORT_VERSION=$Matches.1 + "." + $Matches.2
            luarocks config lua_version $LUA_SHORT_VERSION
          }
          else
          {
            Write-Host "Invalid Lua version: ${{ matrix.LUA_VERSION }}";
            exit /B 1;
          }
      
      - name: Update environment variables with variables from LuaRocks
        run: |
          $luarocks_path = luarocks.exe path
          Add-Content "${{ github.env }}" $luarocks_path.Replace("""", "").Replace("'", "").Replace("SET ", "")
      
      - name: Install LuaFileSystem
        run: luarocks install luafilesystem
      
      # https://lunarmodules.github.io/luafilesystem/examples.html
      - name: Create a Test file for LuaFileSystem
        run: |
          $test_script = @'
          local lfs = require"lfs"

          function attrdir (path)
              for file in lfs.dir(path) do
                  if file ~= "." and file ~= ".." then
                      local f = path..'/'..file
                      print ("\t "..f)
                      local attr = lfs.attributes (f)
                      assert (type(attr) == "table")
                      if attr.mode == "directory" then
                          attrdir (f)
                      else
                          for name, value in pairs(attr) do
                              print (name, value)
                          end
                      end
                  end
              end
          end

          attrdir (".")
          '@

          Set-Content "${{ env.LFS_TEST_FILE }}" $test_script -NoNewLine

      - name: Test LuaFileSystem
        run: lua "${{ env.LFS_TEST_FILE }}"
      
      - name: Prepare artifacts to upload
        if: ${{ matrix.LUA_VERSION == '5.4.7' && (github.ref_name == 'release' && startsWith(github.ref, 'refs/tags/')) }}
        run: |
          mkdir release;
          $dirs_to_archive = "${{ env.CONSOLE_DIR }}", "${{ env.WPF_DIR }}";

          foreach ($dir in $dirs_to_archive)
          {
            $archive_name = (Get-Item $dir | Select-Object -ExpandProperty Name) + "-v${{ env.LuaInstaller_VERSION }}-${{ matrix.ARCH }}.zip";
            $archive_path = Join-Path -Path "release" -ChildPath $archive_name;

            Compress-Archive -Path $dir -DestinationPath $archive_path;

            $current_file_sha256_hash = Get-FileHash $archive_path -Algorithm SHA256 | Select-Object -ExpandProperty Hash;
            $current_file_md5_hash = Get-FileHash $archive_path -Algorithm MD5 | Select-Object -ExpandProperty Hash;
            $current_file_sha256_file = Join-Path -Path "release" -ChildPath ($archive_name + "-SHA256.txt");
            $current_file_md5_file = Join-Path -Path "release" -ChildPath ($archive_name + "-MD5.txt");
            Set-Content -Path $current_file_sha256_file -Value $current_file_sha256_hash -NoNewline;
            Set-Content -Path $current_file_md5_file -Value $current_file_md5_hash -NoNewline;
          }
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: ${{ matrix.LUA_VERSION == '5.4.7' && (github.ref_name == 'release' && startsWith(github.ref, 'refs/tags/')) }}
        with:
          name: release-v${{ env.LuaInstaller_VERSION }}-${{ matrix.ARCH }}
          path: release
          retention-days: 1
          if-no-files-found: error